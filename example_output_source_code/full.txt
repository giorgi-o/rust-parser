Parsed AST: Region {
    name: "<Identifier, DataManagement>",
    body: [
        Function(
            Function {
                name: "<Identifier, allocate>",
                params: [
                    Variable {
                        name: "<Identifier, size>",
                        var_type: Int32,
                    },
                ],
                body: [
                    Let(
                        "<Identifier, buffer>",
                        Call(
                            "<Identifier, allocateMemory>",
                            [
                                Variable(
                                    "<Identifier, size>",
                                ),
                            ],
                        ),
                    ),
                    Return(
                        Variable(
                            "<Identifier, buffer>",
                        ),
                    ),
                ],
            },
        ),
        Function(
            Function {
                name: "<Identifier, free>",
                params: [
                    Variable {
                        name: "<Identifier, ptr>",
                        var_type: Int32,
                    },
                ],
                body: [
                    Expression(
                        Call(
                            "<Identifier, freeMemory>",
                            [
                                Variable(
                                    "<Identifier, ptr>",
                                ),
                            ],
                        ),
                    ),
                    Return(
                        Number(
                            10,
                        ),
                    ),
                ],
            },
        ),
        Function(
            Function {
                name: "<Identifier, processStream>",
                params: [
                    Variable {
                        name: "<Identifier, streamSize>",
                        var_type: Int32,
                    },
                    Variable {
                        name: "<Identifier, streamSize>",
                        var_type: Int32,
                    },
                ],
                body: [
                    If(
                        Call(
                            "<Identifier, isMemoryFreed>",
                            [
                                Variable(
                                    "<Identifier, ptr>",
                                ),
                            ],
                        ),
                        [
                            Return(
                                Number(
                                    0,
                                ),
                            ),
                        ],
                    ),
                    Let(
                        "<Identifier, streamPtr>",
                        Call(
                            "<Identifier, allocate>",
                            [
                                Variable(
                                    "<Identifier, streamSize>",
                                ),
                            ],
                        ),
                    ),
                ],
            },
        ),
        Function(
            Function {
                name: "<Identifier, processStream>",
                params: [
                    Variable {
                        name: "<Identifier, streamSize>",
                        var_type: Int32,
                    },
                ],
                body: [
                    Assignment(
                        "<Identifier, blocksize>",
                        Number(
                            10,
                        ),
                    ),
                    Let(
                        "<Identifier, streamPtr>",
                        Call(
                            "<Identifier, allocate>",
                            [
                                Variable(
                                    "<Identifier, streamSize>",
                                ),
                            ],
                        ),
                    ),
                    Let(
                        "<Identifier, blocks>",
                        Array(
                            [],
                        ),
                    ),
                    ForLoop(
                        Let(
                            "<Identifier, i>",
                            Number(
                                0,
                            ),
                        ),
                        Binary(
                            Variable(
                                "<Identifier, i>",
                            ),
                            LessThan,
                            Variable(
                                "<Identifier, streamSize>",
                            ),
                        ),
                        Assignment(
                            "<Identifier, i>",
                            Binary(
                                Variable(
                                    "<Identifier, i>",
                                ),
                                Add,
                                Variable(
                                    "<Identifier, blockSize>",
                                ),
                            ),
                        ),
                        [
                            Let(
                                "<Identifier, blockPtr>",
                                Call(
                                    "<Identifier, borrow>",
                                    [
                                        Binary(
                                            Variable(
                                                "<Identifier, streamPtr>",
                                            ),
                                            Add,
                                            Variable(
                                                "<Identifier, i>",
                                            ),
                                        ),
                                    ],
                                ),
                            ),
                            Expression(
                                MethodCall(
                                    Variable(
                                        "<Identifier, blocks>",
                                    ),
                                    "<Identifier, push>",
                                    [
                                        Variable(
                                            "<Identifier, blockPtr>",
                                        ),
                                    ],
                                ),
                            ),
                        ],
                    ),
                    Return(
                        Variable(
                            "<Identifier, blocks>",
                        ),
                    ),
                ],
            },
        ),
    ],
}
