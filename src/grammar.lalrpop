grammar;

use crate::grammar_ast::{Region, Function, Variable, Statement, Expr, BinaryOp, Type, RegionItem};
pub Program: Vec<Region> = {
    <region:Region> => vec![region],
    <mut v:Program> <region:Region> => {
        v.push(region);
        v
    }
};

pub Region: Region = {
    "<Keyword, region>" <name:Identifier> "<Lcur, {>" <body:RegionBody> "<Rcur, }>" =>
        Region { name, body }
};

RegionBody: Vec<RegionItem> = {
    <items:RegionItem*> => items
};
RegionItem: RegionItem = {
    <func:Function> => RegionItem::Function(func),
    <stmt:Stmt> => RegionItem::Statement(stmt),
};
Function: Function = {
    "<Keyword, function>" <name:Identifier> "<Lpar, (>" <params:Parameters> "<Rpar, )>" "<Lcur, {>" <body:StmtList> "<Rcur, }>" =>
        Function { name, params, body }
};

Parameters: Vec<Variable> = {
    => Vec::new(),
    <param:Parameter> => vec![param],
    <mut params:Parameters> "<Comma, ,>" <param:Parameter> => {
        params.push(param);
        params
    }
};

Parameter: Variable = {
    <name:Identifier> => Variable {
        name,
        var_type: Type::Int32
    }
};

StmtList: Vec<Statement> = {
    <statements:Stmt*> => statements,
};

Stmt: Statement = {
    // If-else statement
    "<Keyword, if>" <condition:Expr> "<Lcur, {>" <if_body:StmtList> "<Rcur, }>" 
    "<Keyword, else>" "<Lcur, {>" <else_body:StmtList> "<Rcur, }>" =>  
        Statement::IfElse(condition, if_body, else_body),

    // Regular if statement    
    "<Keyword, if>" <condition:Expr> "<Lcur, {>" <if_body:StmtList> "<Rcur, }>" =>  
        Statement::If(condition, if_body),
        
    "<Keyword, for>" "<Lpar, (>" "<Keyword, let>" <init_var:Identifier> "<Operator, =>" <init_val:Expr> "<Semi, ;>" 
        <condition:Expr> "<Semi, ;>" 
        <update_var:Identifier> "<Operator, =>" <update_val:Expr> "<Rpar, )>" 
        "<Lcur, {>" <body:StmtList> "<Rcur, }>" =>
        Statement::ForLoop(
            Box::new(Statement::Let(init_var, init_val)),
            condition,
            Box::new(Statement::Assignment(update_var, update_val)),
            body
        ),

    "<Keyword, return>" <expr:Expr> "<Semi, ;>" => 
        Statement::Return(expr),

    // Uninitialized variable declaration
    "<Keyword, let>" <name:Identifier> "<Semi, ;>" => 
        Statement::Let(name, Box::new(Expr::Uninitialized)),

    // Regular variable declaration    
    "<Keyword, let>" <name:Identifier> "<Operator, =>" <expr:Expr> "<Semi, ;>" => 
        Statement::Let(name, expr),
    <name:Identifier> "<Operator, =>" <expr:Expr> "<Semi, ;>" => 
        Statement::Assignment(name, expr),
    <expr:Expr> "<Semi, ;>" => 
        Statement::Expression(expr),
};

// Expression precedence hierarchy
Expr: Box<Expr> = {
    AddExpr
};

AddExpr: Box<Expr> = {
    <l:AddExpr> "<Operator, +>" <r:MulExpr> => Box::new(Expr::Binary(l, BinaryOp::Add, r)),
    MulExpr
};

MulExpr: Box<Expr> = {
    <l:MulExpr> "<Operator, *>" <r:CmpExpr> => Box::new(Expr::Binary(l, BinaryOp::Mult, r)),
    CmpExpr
};

CmpExpr: Box<Expr> = {
    <l:CmpExpr> "<Operator, <>" <r:Term> => Box::new(Expr::Binary(l, BinaryOp::LessThan, r)),
    Term
};

Term: Box<Expr> = {
    DotExpr
};

DotExpr: Box<Expr> = {
    <e:DotExpr> "<Dot, .>" <name:Identifier> "<Lpar, (>" <args:ExprList> "<Rpar, )>" => 
        Box::new(Expr::MethodCall(e, name, args)),
    Factor
};

Factor: Box<Expr> = {
    Number => Box::new(Expr::Number(<>)),
    r#"<StringLiteral, "([^"]*)">"# => Box::new(Expr::StringLiteral(<>.to_string())),
    "<Lbrack, [>" "<Rbrack, ]>" => Box::new(Expr::Array(Vec::new())),
    "<Lbrack, [>" <elements:ArrayElements> "<Rbrack, ]>" => Box::new(Expr::Array(elements)),
    <name:Identifier> "<Lpar, (>" <args:ExprList> "<Rpar, )>" => Box::new(Expr::Call(name, args)),
    <name:Identifier> => Box::new(Expr::Variable(name)),
    "<Lpar, (>" <e:Expr> "<Rpar, )>" => e,
};

ArrayElements: Vec<Box<Expr>> = {
    <expr:Expr> => vec![expr],
    <mut v:ArrayElements> "<Comma, ,>" <e:Expr> => {
        v.push(e);
        v
    }
};

ExprList: Vec<Box<Expr>> = {
    => Vec::new(),
    <expr:Expr> => vec![expr],
    <mut exprs:ExprList> "<Comma, ,>" <expr:Expr> => {
        exprs.push(expr);
        exprs
    }
};

Identifier: String = r"<Identifier, [a-zA-Z_][a-zA-Z0-9_]*>" => <>.to_string();

Number: i32 = {
    r"<Number, (-?[0-9]+)>" => <>.split(',').nth(1).unwrap().trim().trim_end_matches('>').parse().unwrap()
};