grammar;

use crate::grammar_ast::{Region, Function, Variable};

// Top-level region structure containing functions
pub Region: Region = {
    "<Keyword, region>" <name:Identifier> "<Lcur, {>" <functions:Function+> "<Rcur, }>" =>
        Region { name, functions }
};

// Define a function with parameters and an empty body
Function: Function = {
    "<Keyword, function>" <name:Identifier> "<Lpar, (>" <params:ParameterList> "<Rpar, )>" "<Lcur, {>" "<Rcur, }>" =>
        Function {
            name,
            params,
            body: Vec::new(), // Empty body placeholder
        }
};

// Define a list of parameters
#[inline]
ParameterList: Vec<Variable> = {
    <params:Parameter+> => params
};

// Define a single parameter
Parameter: Variable = {
    <name:Identifier> => Variable {
        name,
        var_type: crate::grammar_ast::Type::Int32 // Default type
    }
};

// Match identifiers generically
Identifier: String = r"<Identifier, [a-zA-Z_][a-zA-Z0-9_]*>" => <>.to_string();
